Lab9 - try invoking defer from main, f , g and observe difference 
        package main
        
        import "fmt"
        
        func main() {
        	defer handler()
        	f()
        	fmt.Println("Returned normally from f.")
        }
        func f() {
        
        	fmt.Println("Calling g.")
        	g(5)
        	fmt.Println("Returned normally from g.")
        }
        
        func g(i int) {
        	if i > 3 {
        		fmt.Println("Panicking!")
        		panic("panicked for .....")
        	}
        	fmt.Println("Printing in g", i)
        }
        
        func handler() {
        	r := recover()
        	fmt.Println("In recover ", r)
        }

Lab8 - closures 
        package main
        import "fmt"
        
        func adder() func(int) int {
        	sum := 0
        	return func(x int) int {
        		sum += x
        		return sum
        	}
        }
        
        
        func test(/*input args */) func() (string){
        
        	return func () (string) {
        		fmt.Println("M1 .... ")
        		return "m111111"
        	}
        }
        
        func greet(fptr func (string) , str string ){
        	fptr(str)
        }
        func hi(str string){
        	fmt.Println("hi invoked with " , str)
        }
        func bye(str string){
        	fmt.Println("bye invoked with " , str)
        }
        func main(){
        	//hello("abc")
        	greet(hi, "Vaishali")
        	greet(bye, "Vaishali")
        
        	fp := test()
        	fp()
        
        	adder1:= adder()
        	fmt.Println("adder with 10 " , adder1(10))
        	fmt.Println("adder with 10 " , adder1(10))
        	fmt.Println("adder with 10 " , adder1(10))
        	fmt.Println("adder with 10 " , adder1(10))
        }
        
        

Lab7 -  Understand defer
        package main 
        import "fmt"
        func main(){
        	defer fmt.Println("Hello ")
        	add()
        	fmt.Println("World ")
        }
        
        func add(){
        	defer fmt.Println("in add function - defser ")
        	fmt.Println("in function add line1 ")
        }
        invoke defer in for loop (check defer stack)

Lab6 - Asgn1
        Accept a number from user and print Fibonacci series till that number
            fmt -> scan 

       Asgn2 
        Accept 5 strings from user and sort and print the same
          scan, 


Lab5- Pass by value vs pass by reference
      package main
      import (
      	"fmt"
      )
      func increment(ptoint *int ){
      	fmt.Println("in increment with no = "  , ptoint)
      	*ptoint = *ptoint + 1
      	fmt.Println("in increment changed number to  = "  , ptoint)
      }
      func main() {
      	no := 200
      	fmt.Println("No  = ", no)
      	increment(&no)
      	fmt.Println("No  = ", no)	
      }

Lab4 - Create Lab4.go 
          package main
          import (
          	"fmt"
          )
          
          func main() {
          	fmt.Println("Hello World !!")
          	sum, sub := calc(100,50)
          	fmt.Println("Sum = ", sum, ", Sub = ", sub)	
          }
       create Lab4Helper.go 
          package main
          func calc(no1, no2 int )(sum, sub int){
          	sum, sub = no1+no2, no1-no2
          	return 
          }
    cmd>go run Lab4.go Lab4Helper.go 
Lab3 - Use strconv package to convert String to Integer 
                    https://go.dev/tour/flowcontrol/1
          Show sum of arguments passed 
          package main
          import (
          	"fmt"
          	"os"
          )
          
          func main(){
          	strarr := os.Args
          	fmt.Println(strarr)
          	cnt := len(os.Args)
          	fmt.Println("Length = " , cnt)
          	if cnt <= 1 {
          		fmt.Println("No additional Arguments ")
          	} else {
          		fmt.Println("Additional Arguments ")
          	}
          }
Lab2- 
          Write Lab2.go
          package main

          import "fmt"
          
          func calc(no1, no2 int )(int, int){
          	return no1+no2, no1-no2
          }
          func main() {
          	fmt.Println("Hello World !!")
          	sum, sub := calc(100,50)
          	fmt.Println("Sum = ", sum, ", Sub = ", sub)	
          }

          Watch 
                    1. modify return to have single value 
                    2. import and don't use, create variable and not used 
          Modify code to write one more method for swapping of two input strings 

          Modify Lab1 to import os 
                    package main
                    import "fmt"
                    import "os"
                    
                    func main() {
                              fmt.Println("Hello World !!")
                              hname, err := os.Hostname()
                              fmt.Println(hname, err)
                    }
          Or
                    import (
                    	"fmt"
                    	"os"
                    )
          
Lab1 - confirm go installation
          go version
       Visual Studio code (go extension)
      Create Demo1 folder and Lab1.go 
         package main
         import "fmt"
         func main() {
          	fmt.Println("Hello World !!")
          }
  cmd>go run Lab1.go 
  cmd>go build Lab1.go 
        observe Lab1.exe getting created
  cmd>Lab1.exe 
  Check API docuementation for package fmt 
